{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { ArcView } from './ArcBase';\nvar eventMap = {\n  onClick: 'click',\n  onDoubleClick: 'double-click',\n  onDrag: 'drag',\n  onHold: 'hold',\n  onKeyDown: 'key-down',\n  onKeyUp: 'key-up',\n  onLayerViewCreate: 'layerview-create',\n  onLayerViewDestroy: 'layerview-destroy',\n  onMouseWheel: 'mouse-wheel',\n  onPointerDown: 'pointer-down',\n  onPointerMove: 'pointer-move',\n  onPointerUp: 'pointer-up',\n  onResize: 'resize'\n};\nexport var MapBase = function (props) {\n  return React.createElement(ArcView, __assign({}, props, {\n    loadMap: function (_a, containerId) {\n      var Map = _a[0],\n          View = _a[1];\n      var mapData = new Promise(function (resolve, reject) {\n        try {\n          var map_1 = new Map(props.mapProperties); // Make the map\n\n          var viewProperties = __assign({\n            map: map_1,\n            container: containerId\n          }, props.viewProperties);\n\n          var view_1 = new View(viewProperties); // Make the view\n\n          var typedView_1 = view_1;\n          Object.keys(eventMap).forEach(function (key) {\n            if (props[key]) {\n              typedView_1.on(eventMap[key], props[key]);\n            }\n          });\n          view_1.when(function () {\n            resolve({\n              map: map_1,\n              view: view_1\n            });\n          }, function (err) {\n            reject(err);\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n      return mapData;\n    }\n  }));\n};\nexport var WebBase = function (props) {\n  return React.createElement(ArcView, __assign({}, props, {\n    loadMap: function (_a, containerId) {\n      var WebConstructor = _a[0],\n          ViewConstructor = _a[1],\n          all = _a[2];\n      var mapData = new Promise(function (resolve, reject) {\n        try {\n          var map_2 = new WebConstructor(__assign({\n            portalItem: {\n              id: props.id\n            }\n          }, props.mapProperties));\n          map_2.load().then(function () {\n            return map_2.basemap.load();\n          }).then(function () {\n            var allLayers = map_2.allLayers;\n            var promises = allLayers.map(function (layer) {\n              return layer.load();\n            });\n            return all(promises.toArray());\n          }).then(function () {\n            var view = new ViewConstructor(__assign({\n              container: containerId,\n              map: map_2\n            }, props.viewProperties));\n            Object.keys(eventMap).forEach(function (key) {\n              if (props[key]) {\n                view.on(eventMap[key], props[key]);\n              }\n            });\n            resolve({\n              map: map_2,\n              view: view\n            });\n          }).otherwise(function (err) {\n            reject(err);\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n      return mapData;\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}