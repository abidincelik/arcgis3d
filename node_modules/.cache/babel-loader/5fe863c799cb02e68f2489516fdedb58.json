{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { loadModules } from 'esri-loader';\nimport * as React from 'react';\nimport ArcContainer from './ArcContainer';\n\nvar ArcView =\n/** @class */\nfunction (_super) {\n  __extends(ArcView, _super);\n\n  function ArcView(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      mapContainerId: Math.random().toString(36).substring(0, 14),\n      status: 'loading'\n    };\n    return _this;\n  }\n\n  ArcView.prototype.render = function () {\n    var _this = this;\n\n    var centerStyle = {\n      left: '50%',\n      marginRight: '-50%',\n      position: 'absolute',\n      top: '50%',\n      transform: 'translate(-50%, -50%)'\n    };\n    var mapStyle = this.props.className ? this.props.style : __assign({\n      height: '100%',\n      position: 'relative',\n      width: '100%'\n    }, this.props.style);\n    var loadElement = this.props.loadElement ? this.props.loadElement : React.createElement(\"h3\", {\n      id: \"react-arcgis-loading-text\"\n    }, \"Loading...\");\n    var failElement = this.props.failElement ? this.props.failElement : React.createElement(\"h3\", {\n      id: \"react-arcgis-fail-text\"\n    }, \"The ArcGIS API failed to load.\");\n\n    if (this.state.status === 'loaded') {\n      if (!!this.props.childrenAsFunction) {\n        return this.props.childrenAsFunction(this.state.map, this.state.view);\n      }\n\n      var childrenWithProps = React.Children.map(this.props.children, function (child) {\n        var childEl = child;\n        return React.cloneElement(childEl, {\n          map: _this.state.map,\n          view: _this.state.view\n        });\n      });\n      return React.createElement(\"div\", {\n        id: \"base-container\",\n        style: mapStyle,\n        className: this.props.className\n      }, React.createElement(ArcContainer, {\n        id: this.state.mapContainerId,\n        style: {\n          width: '100%',\n          height: '100%'\n        }\n      }), childrenWithProps);\n    } else if (this.state.status === 'loading') {\n      return React.createElement(\"div\", {\n        id: \"base-container\",\n        style: mapStyle,\n        className: this.props.className\n      }, React.createElement(ArcContainer, {\n        id: this.state.mapContainerId,\n        style: {\n          width: '100%',\n          height: '100%'\n        }\n      }), React.createElement(\"div\", {\n        style: centerStyle\n      }, loadElement));\n    }\n\n    return React.createElement(\"div\", {\n      id: \"base-container\",\n      style: mapStyle,\n      className: this.props.className\n    }, React.createElement(ArcContainer, {\n      id: this.state.mapContainerId,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }), React.createElement(\"div\", {\n      style: centerStyle\n    }, failElement));\n  };\n\n  ArcView.prototype.componentDidMount = function () {\n    var _this = this;\n\n    loadModules(this.props.scriptUri, this.props.loaderOptions).then(function (modules) {\n      return _this.props.loadMap(modules, _this.state.mapContainerId).then(function (_a) {\n        var map = _a.map,\n            view = _a.view;\n\n        _this.setState({\n          map: map,\n          view: view,\n          status: 'loaded'\n        });\n\n        if (_this.props.onLoad) {\n          _this.props.onLoad(map, view);\n        }\n      }).catch(function (e) {\n        throw e;\n      });\n    }).catch(function (e) {\n      _this.setState({\n        status: 'failed'\n      });\n\n      if (_this.props.onFail) {\n        _this.props.onFail(e);\n      }\n    });\n  };\n\n  return ArcView;\n}(React.Component);\n\nexport { ArcView };","map":null,"metadata":{},"sourceType":"module"}